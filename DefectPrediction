##### Accenture Data Science Accelarator ##########
########### Machine Learning Project ##############
################## March 2019 #####################

# Environnement and data prep
##############################

rm(list=ls()) #Cleaning environment

# Set working directory
setwd("/Users/raphaele/Documents/WIDS")

# Load packages
library(dplyr)
library(caret)
library(nnet)
library(randomForest)

# Load the full CSV file, once
PRODCOFull <- read.csv("red_team_clean_data_V1.csv")

#Create the fitting data from the full data so we don't have to load the full CSV everytime
PRODCOData <- PRODCOFull

#View the structure of the data set
str(PRODCOData)     #data.frame: 272911 obs. of 25 variables

#Extract 1% of the dataset for model fitting/testing
SelectRows <- sample(1:nrow(PRODCOData), 0.01*nrow(PRODCOData))
PRODCOData <- PRODCOData[SelectRows, ]
nrow(PRODCOData)

#Check for any NA in the dataset
any(is.na(PRODCOData))      #Returns FALSE = no NA found

# Remove any NAs if any
#PRODCOData <- na.omit(PRODCOData)

#check the dependent variable is categorical
str(PRODCOData$Result_Type)   #Returns factor, which is ok

#Look at the distribution of defects
TableDefect <- table(PRODCOData$Result_Type)
#Returns:
#Defect_1 Defect_2 Defect_3 Defect_4     PASS 
#   2333     1625      838      499    21996 

# Turn the table into a DF to allow plotting
TableDefect <- as.data.frame(TableDefect)

# Plot a bar chart for defect distribution
ggplot(TableDefect, aes(x = Var1, y = Freq, fill = Var1)) + 
  geom_col(show.legend = FALSE) + xlab("Quality control result") + ylab("Frequency")

#Separate data into train and test
#################################

# 1 train the model on 70% of the data
# 2 test the model on 30% of the data 

#set.seed(42)
trainingRows <- sample(1:nrow(PRODCOData), 0.7*nrow(PRODCOData))
trainingPRODCOData <- PRODCOData[trainingRows, ]
testPRODCOData <- PRODCOData[-trainingRows, ]

# Preprocess data
###################

# Preprocess data with PCA and remove variables with zero variance
preProcValues <- preProcess(trainingPRODCOData, method = c("pca", "zv"))
#Apply preProcessing to train and test data
trainPCA <- predict(preProcValues, trainingPRODCOData)
testPCA <- predict(preProcValues, testPRODCOData)

str(testPCA)      # Check the structure of the data after preprocessing

# KNN
#############

#Train model on the processed training set, 70% of the data
modelKNN <- train(Result_Type ~ . , trainPCA, "knn", tuneLength = 10)

#Use the model to predict QC result on test set
PredmodelKNN <- predict(modelKNN,type="raw",newdata=testPCA)

# Output the stats and accurracy rate for KNN
cat("Prediction statistics for KNN:")
confusionMatrix(PredmodelKNN, testPCA$Result_Type)
#Accuracy : 0.7998          


#Multinomial regression 
####################

# Train the model on training set
modelMultiReg <- train(Result_Type ~ . ,data = trainPCA,
               method = "multinom",maxit = 1000, MaxNWts=2000)

# Use the model to predict QA on test set
PredmodelMultiReg <- predict(modelMultiReg,type="raw",newdata=testPCA)

# Output the stats and accurracy rate
cat("Prediction statistics for the multinomial regression:")
confusionMatrix(PredmodelMultiReg, testPCA$Result_Type)
# Accuracy : 0.8952   

#Random forest
######################

# Train the model on training set
modelRF <- randomForest(Result_Type ~ . , data=trainPCA)

# Use the model to predict QA on test set
PredmodelRF <- predict(modelRF,type="response",newdata=testPCA)

# Output the stats and accurracy rate for RF
cat("Prediction statistics for the multinomial regression:")
confusionMatrix(PredmodelRF, testPCA$Result_Type)
#Accuracy : 0.8791 



# Resetting the data set to its full size 
#######################################

# To be used for final model instead of the 2% that were used for testing

#Create the fitting data from the full data so we don't have to load the full CSV everytime
PRODCOData <- PRODCOFull


#Separate full data into train and test
#################################

# 1 train the model on 70% of the data
# 2 test the model on 30% of the data 

#set.seed(42)
trainingRows <- sample(1:nrow(PRODCOData), 0.7*nrow(PRODCOData))
trainingPRODCOData <- PRODCOData[trainingRows, ]
testPRODCOData <- PRODCOData[-trainingRows, ]

# Preprocess full data
###################

# Preprocess data with PCA and remove variables with zero variance
preProcValues <- preProcess(trainingPRODCOData, method = c("pca", "zv"))
#Apply preProcessing to train and test data
trainPCA <- predict(preProcValues, trainingPRODCOData)
testPCA <- predict(preProcValues, testPRODCOData)

# Final model
###################

# multinom after dropping parameters that would bring the accuracy below 90%

# Fitting in training data
modelMultiRegFinal <- multinom(Result_Type ~ 
      SKU+path+PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8+PC9+PC10+PC11+PC12+PC13+PC14+PC15+PC16,
      data = trainPCA, maxit = 1000, MaxNWts=2000)

# Prediction on test data
PredmodelMultiRegFinal <- predict(modelMultiRegFinal,type="class",newdata=testPCA)

# Output stats and accurracy of the model
cat("Prediction statistics for the final model:")
confusionMatrix(PredmodelMultiRegFinal, testPCA$Result_Type)
#Accuracy : 0.8913 
